2024-03-13 21:27:44:177 grammar LogManager.java:25 before: (COMBINED_GRAMMAR Dictio (RULES (RULE main (BLOCK (ALT LETS RUN LLAVEA (? (BLOCK (ALT content))) LLAVEC))) (RULE content (BLOCK (ALT (+ (BLOCK (ALT condif) (ALT imprime) (ALT declara) (ALT asigna)))))) (RULE condif (BLOCK (ALT IF PARA siono PARC LLAVEA content LLAVEC (? (BLOCK (ALT deotro)))))) (RULE siono (BLOCK (ALT expr (= op (BLOCK (ALT MAYORQUE) (ALT MENORQUE) (ALT IGUAL) (ALT DIFERENTE))) expr))) (RULE deotro (BLOCK (ALT ELSE LLAVEA content LLAVEC))) (RULE imprime (BLOCK (ALT IMP PARA textobteiner (? (BLOCK (ALT COMA expr))) PARC SC))) (RULE declara (BLOCK (ALT COMP ID (? (BLOCK (ALT EQU expr))) SC))) (RULE asigna (BLOCK (ALT ID EQU expr SC))) (RULE expr (BLOCK (ALT expr (= operation (BLOCK (ALT ASTE) (ALT DIA))) expr) (ALT expr (= operation (BLOCK (ALT SUM) (ALT RES))) expr) (ALT (? (BLOCK (ALT RES))) INT) (ALT PARA expr PARC) (ALT ID))) (RULE textobteiner (BLOCK (ALT TEXTO))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE LETS (BLOCK (ALT 'lets'))) (RULE RUN (BLOCK (ALT 'run'))) (RULE COMP (BLOCK (ALT 'comp'))) (RULE IMP (BLOCK (ALT 'imp'))) (RULE IF (BLOCK (ALT 'si'))) (RULE ELSE (BLOCK (ALT 'sino'))) (RULE ASTE (BLOCK (ALT '*'))) (RULE DIA (BLOCK (ALT '/'))) (RULE RES (BLOCK (ALT '-'))) (RULE SUM (BLOCK (ALT '+'))) (RULE EQU (BLOCK (ALT '='))) (RULE LLAVEA (BLOCK (ALT '{'))) (RULE LLAVEC (BLOCK (ALT '}'))) (RULE DOT (BLOCK (ALT '.'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE PARA (BLOCK (ALT '('))) (RULE PARC (BLOCK (ALT ')'))) (RULE SC (BLOCK (ALT ';'))) (RULE COMA (BLOCK (ALT ','))) (RULE COMID (BLOCK (ALT '"'))) (RULE MAYORQUE (BLOCK (ALT '>'))) (RULE MENORQUE (BLOCK (ALT '<'))) (RULE IGUAL (BLOCK (ALT '=='))) (RULE DIFERENTE (BLOCK (ALT '!='))) (RULE TEXTO (BLOCK (ALT COMID (* (BLOCK (ALT (~ (SET ["\r\n]))))) COMID)))))
2024-03-13 21:27:44:201 grammar LogManager.java:25 after: (COMBINED_GRAMMAR Dictio (RULES (RULE main (BLOCK (ALT LETS RUN LLAVEA (? (BLOCK (ALT content))) LLAVEC))) (RULE content (BLOCK (ALT (+ (BLOCK (ALT condif) (ALT imprime) (ALT declara) (ALT asigna)))))) (RULE condif (BLOCK (ALT IF PARA siono PARC LLAVEA content LLAVEC (? (BLOCK (ALT deotro)))))) (RULE siono (BLOCK (ALT expr (= op (SET MAYORQUE MENORQUE IGUAL DIFERENTE)) expr))) (RULE deotro (BLOCK (ALT ELSE LLAVEA content LLAVEC))) (RULE imprime (BLOCK (ALT IMP PARA textobteiner (? (BLOCK (ALT COMA expr))) PARC SC))) (RULE declara (BLOCK (ALT COMP ID (? (BLOCK (ALT EQU expr))) SC))) (RULE asigna (BLOCK (ALT ID EQU expr SC))) (RULE expr (BLOCK (ALT expr (= operation (SET ASTE DIA)) expr) (ALT expr (= operation (SET SUM RES)) expr) (ALT (? (BLOCK (ALT RES))) INT) (ALT PARA expr PARC) (ALT ID))) (RULE textobteiner (BLOCK (ALT TEXTO))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE LETS (BLOCK (ALT 'lets'))) (RULE RUN (BLOCK (ALT 'run'))) (RULE COMP (BLOCK (ALT 'comp'))) (RULE IMP (BLOCK (ALT 'imp'))) (RULE IF (BLOCK (ALT 'si'))) (RULE ELSE (BLOCK (ALT 'sino'))) (RULE ASTE (BLOCK (ALT '*'))) (RULE DIA (BLOCK (ALT '/'))) (RULE RES (BLOCK (ALT '-'))) (RULE SUM (BLOCK (ALT '+'))) (RULE EQU (BLOCK (ALT '='))) (RULE LLAVEA (BLOCK (ALT '{'))) (RULE LLAVEC (BLOCK (ALT '}'))) (RULE DOT (BLOCK (ALT '.'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE PARA (BLOCK (ALT '('))) (RULE PARC (BLOCK (ALT ')'))) (RULE SC (BLOCK (ALT ';'))) (RULE COMA (BLOCK (ALT ','))) (RULE COMID (BLOCK (ALT '"'))) (RULE MAYORQUE (BLOCK (ALT '>'))) (RULE MENORQUE (BLOCK (ALT '<'))) (RULE IGUAL (BLOCK (ALT '=='))) (RULE DIFERENTE (BLOCK (ALT '!='))) (RULE TEXTO (BLOCK (ALT COMID (* (BLOCK (ALT (~ (SET ["\r\n]))))) COMID)))))
2024-03-13 21:27:44:228 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR Dictio (RULES (RULE main (BLOCK (ALT LETS RUN LLAVEA (? (BLOCK (ALT content))) LLAVEC))) (RULE content (BLOCK (ALT (+ (BLOCK (ALT condif) (ALT imprime) (ALT declara) (ALT asigna)))))) (RULE condif (BLOCK (ALT IF PARA siono PARC LLAVEA content LLAVEC (? (BLOCK (ALT deotro)))))) (RULE siono (BLOCK (ALT expr (= op (SET MAYORQUE MENORQUE IGUAL DIFERENTE)) expr))) (RULE deotro (BLOCK (ALT ELSE LLAVEA content LLAVEC))) (RULE imprime (BLOCK (ALT IMP PARA textobteiner (? (BLOCK (ALT COMA expr))) PARC SC))) (RULE declara (BLOCK (ALT COMP ID (? (BLOCK (ALT EQU expr))) SC))) (RULE asigna (BLOCK (ALT ID EQU expr SC))) (RULE expr (BLOCK (ALT expr (= operation (SET ASTE DIA)) expr) (ALT expr (= operation (SET SUM RES)) expr) (ALT (? (BLOCK (ALT RES))) INT) (ALT PARA expr PARC) (ALT ID))) (RULE textobteiner (BLOCK (ALT TEXTO)))))
2024-03-13 21:27:44:228 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR DictioLexer (RULES (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE LETS (BLOCK (ALT 'lets'))) (RULE RUN (BLOCK (ALT 'run'))) (RULE COMP (BLOCK (ALT 'comp'))) (RULE IMP (BLOCK (ALT 'imp'))) (RULE IF (BLOCK (ALT 'si'))) (RULE ELSE (BLOCK (ALT 'sino'))) (RULE ASTE (BLOCK (ALT '*'))) (RULE DIA (BLOCK (ALT '/'))) (RULE RES (BLOCK (ALT '-'))) (RULE SUM (BLOCK (ALT '+'))) (RULE EQU (BLOCK (ALT '='))) (RULE LLAVEA (BLOCK (ALT '{'))) (RULE LLAVEC (BLOCK (ALT '}'))) (RULE DOT (BLOCK (ALT '.'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE PARA (BLOCK (ALT '('))) (RULE PARC (BLOCK (ALT ')'))) (RULE SC (BLOCK (ALT ';'))) (RULE COMA (BLOCK (ALT ','))) (RULE COMID (BLOCK (ALT '"'))) (RULE MAYORQUE (BLOCK (ALT '>'))) (RULE MENORQUE (BLOCK (ALT '<'))) (RULE IGUAL (BLOCK (ALT '=='))) (RULE DIFERENTE (BLOCK (ALT '!='))) (RULE TEXTO (BLOCK (ALT COMID (* (BLOCK (ALT (~ (SET ["\r\n]))))) COMID)))))
2024-03-13 21:27:44:501 left-recursion LogManager.java:25 expr
    :   ( {} RES<tokenIndex=180>? INT<tokenIndex=183>  
        | PARA<tokenIndex=190> expr<tokenIndex=192> PARC<tokenIndex=194>  
        | ID<tokenIndex=201>   
        )
        (
          {this.precpred(this._ctx, 5)}?<p=5> operation=(ASTE<tokenIndex=151>|DIA<tokenIndex=153>) expr<tokenIndex=156,p=6>
                  | {this.precpred(this._ctx, 4)}?<p=4> operation=(SUM<tokenIndex=168>|RES<tokenIndex=170>) expr<tokenIndex=173,p=5>
        )*
    ;
2024-03-13 21:27:44:509 grammar LogManager.java:25 added: (RULE expr (BLOCK (ALT (BLOCK (ALT {} (? (BLOCK (ALT (RES (ELEMENT_OPTIONS (= tokenIndex 180)))))) (INT (ELEMENT_OPTIONS (= tokenIndex 183)))) (ALT (PARA (ELEMENT_OPTIONS (= tokenIndex 190))) (expr (ELEMENT_OPTIONS (= tokenIndex 192))) (PARC (ELEMENT_OPTIONS (= tokenIndex 194)))) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 201))))) (* (BLOCK (ALT ({this.precpred(this._ctx, 5)}? (ELEMENT_OPTIONS (= p 5))) (= operation (SET (ASTE (ELEMENT_OPTIONS (= tokenIndex 151))) (DIA (ELEMENT_OPTIONS (= tokenIndex 153))))) (expr (ELEMENT_OPTIONS (= tokenIndex 156) (= p 6)))) (ALT ({this.precpred(this._ctx, 4)}? (ELEMENT_OPTIONS (= p 4))) (= operation (SET (SUM (ELEMENT_OPTIONS (= tokenIndex 168))) (RES (ELEMENT_OPTIONS (= tokenIndex 170))))) (expr (ELEMENT_OPTIONS (= tokenIndex 173) (= p 5)))))))))
2024-03-13 21:27:44:512 semantics LogManager.java:25 tokens={EOF=-1, WS=1, LETS=2, RUN=3, COMP=4, IMP=5, IF=6, ELSE=7, ASTE=8, DIA=9, RES=10, SUM=11, EQU=12, LLAVEA=13, LLAVEC=14, DOT=15, ID=16, INT=17, PARA=18, PARC=19, SC=20, COMA=21, COMID=22, MAYORQUE=23, MENORQUE=24, IGUAL=25, DIFERENTE=26, TEXTO=27}
2024-03-13 21:27:44:512 semantics LogManager.java:25 strings={'lets'=2, 'run'=3, 'comp'=4, 'imp'=5, 'si'=6, 'sino'=7, '*'=8, '/'=9, '-'=10, '+'=11, '='=12, '{'=13, '}'=14, '.'=15, '('=18, ')'=19, ';'=20, ','=21, '"'=22, '>'=23, '<'=24, '=='=25, '!='=26}
2024-03-13 21:27:44:519 LL1 LogManager.java:25 
DECISION 0 in rule main
2024-03-13 21:27:44:519 LL1 LogManager.java:25 look=[{4..6, 16}, 14]
2024-03-13 21:27:44:520 LL1 LogManager.java:25 LL(1)? true
2024-03-13 21:27:44:520 LL1 LogManager.java:25 
DECISION 1 in rule content
2024-03-13 21:27:44:520 LL1 LogManager.java:25 look=[6, 5, 4, 16]
2024-03-13 21:27:44:520 LL1 LogManager.java:25 LL(1)? true
2024-03-13 21:27:44:520 LL1 LogManager.java:25 
DECISION 2 in rule content
2024-03-13 21:27:44:520 LL1 LogManager.java:25 look=[{4..6, 16}, 14]
2024-03-13 21:27:44:520 LL1 LogManager.java:25 LL(1)? true
2024-03-13 21:27:44:520 LL1 LogManager.java:25 
DECISION 3 in rule condif
2024-03-13 21:27:44:520 LL1 LogManager.java:25 look=[7, {4..6, 14, 16}]
2024-03-13 21:27:44:520 LL1 LogManager.java:25 LL(1)? true
2024-03-13 21:27:44:520 LL1 LogManager.java:25 
DECISION 4 in rule imprime
2024-03-13 21:27:44:520 LL1 LogManager.java:25 look=[21, 19]
2024-03-13 21:27:44:520 LL1 LogManager.java:25 LL(1)? true
2024-03-13 21:27:44:521 LL1 LogManager.java:25 
DECISION 5 in rule declara
2024-03-13 21:27:44:521 LL1 LogManager.java:25 look=[12, 20]
2024-03-13 21:27:44:521 LL1 LogManager.java:25 LL(1)? true
2024-03-13 21:27:44:521 LL1 LogManager.java:25 
DECISION 6 in rule expr
2024-03-13 21:27:44:521 LL1 LogManager.java:25 look=[10, 17]
2024-03-13 21:27:44:521 LL1 LogManager.java:25 LL(1)? true
2024-03-13 21:27:44:521 LL1 LogManager.java:25 
DECISION 7 in rule expr
2024-03-13 21:27:44:521 LL1 LogManager.java:25 look=[{10, 17}, 18, 16]
2024-03-13 21:27:44:521 LL1 LogManager.java:25 LL(1)? true
2024-03-13 21:27:44:522 LL1 LogManager.java:25 
DECISION 8 in rule expr
2024-03-13 21:27:44:522 LL1 LogManager.java:25 look=[null, null]
2024-03-13 21:27:44:522 LL1 LogManager.java:25 LL(1)? false
2024-03-13 21:27:44:522 LL1 LogManager.java:25 
DECISION 9 in rule expr
2024-03-13 21:27:44:522 LL1 LogManager.java:25 look=[null, null]
2024-03-13 21:27:44:522 LL1 LogManager.java:25 LL(1)? false
2024-03-13 21:27:44:556 action-translator LogManager.java:25 translate 
2024-03-13 21:27:44:558 action-translator LogManager.java:25 translate this.precpred(this._ctx, 5)
2024-03-13 21:27:44:559 action-translator LogManager.java:25 translate this.precpred(this._ctx, 4)
2024-03-13 21:27:44:563 action-translator LogManager.java:25 translate this.precpred(this._ctx, 5)
2024-03-13 21:27:44:563 action-translator LogManager.java:25 translate this.precpred(this._ctx, 4)
