2024-03-20 16:30:48:031 grammar LogManager.java:25 before: (COMBINED_GRAMMAR Dictio (RULES (RULE main (BLOCK (ALT LETS RUN LLAVEA (? (BLOCK (ALT content))) LLAVEC))) (RULE content (BLOCK (ALT (+ (BLOCK (ALT condif) (ALT imprime) (ALT declara) (ALT asigna)))))) (RULE condif (BLOCK (ALT IF PARA siono PARC LLAVEA content LLAVEC (* (BLOCK (ALT ELIF PARA siono PARC LLAVEA content LLAVEC))) (? (BLOCK (ALT deotro)))))) (RULE deotro (BLOCK (ALT ELSE LLAVEA content LLAVEC))) (RULE siono (BLOCK (ALT expr (= op (BLOCK (ALT MAYORQUE) (ALT MENORQUE) (ALT IGUAL) (ALT DIFERENTE))) expr) (ALT VERDAD) (ALT FALSO))) (RULE imprime (BLOCK (ALT IMP PARA (BLOCK (ALT textobteiner) (ALT expr)) (? (BLOCK (ALT COMA expr))) PARC SC))) (RULE declara (BLOCK (ALT COMP ID (? (BLOCK (ALT EQU expr))) SC))) (RULE asigna (BLOCK (ALT ID EQU expr SC))) (RULE expr (BLOCK (ALT expr (= operation (BLOCK (ALT ASTE) (ALT DIA))) expr) (ALT expr (= operation (BLOCK (ALT SUM) (ALT RES))) expr) (ALT (? (BLOCK (ALT RES))) INT) (ALT PARA expr PARC) (ALT ID))) (RULE textobteiner (BLOCK (ALT TEXTO))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE COMENTARIO (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE LETS (BLOCK (ALT 'lets'))) (RULE RUN (BLOCK (ALT 'run'))) (RULE COMP (BLOCK (ALT 'comp'))) (RULE IMP (BLOCK (ALT 'imp'))) (RULE IF (BLOCK (ALT 'si'))) (RULE ELSE (BLOCK (ALT 'sino'))) (RULE ELIF (BLOCK (ALT 'silif'))) (RULE VERDAD (BLOCK (ALT 'true'))) (RULE FALSO (BLOCK (ALT 'false'))) (RULE ASTE (BLOCK (ALT '*'))) (RULE DIA (BLOCK (ALT '/'))) (RULE RES (BLOCK (ALT '-'))) (RULE SUM (BLOCK (ALT '+'))) (RULE EQU (BLOCK (ALT '='))) (RULE LLAVEA (BLOCK (ALT '{'))) (RULE LLAVEC (BLOCK (ALT '}'))) (RULE DOT (BLOCK (ALT '.'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE PARA (BLOCK (ALT '('))) (RULE PARC (BLOCK (ALT ')'))) (RULE SC (BLOCK (ALT ';'))) (RULE COMA (BLOCK (ALT ','))) (RULE COMID (BLOCK (ALT '"'))) (RULE MAYORQUE (BLOCK (ALT '>'))) (RULE MENORQUE (BLOCK (ALT '<'))) (RULE IGUAL (BLOCK (ALT '=='))) (RULE DIFERENTE (BLOCK (ALT '!='))) (RULE TEXTO (BLOCK (ALT COMID (* (BLOCK (ALT (~ (SET ["\r\n]))))) COMID)))))
2024-03-20 16:30:48:057 grammar LogManager.java:25 after: (COMBINED_GRAMMAR Dictio (RULES (RULE main (BLOCK (ALT LETS RUN LLAVEA (? (BLOCK (ALT content))) LLAVEC))) (RULE content (BLOCK (ALT (+ (BLOCK (ALT condif) (ALT imprime) (ALT declara) (ALT asigna)))))) (RULE condif (BLOCK (ALT IF PARA siono PARC LLAVEA content LLAVEC (* (BLOCK (ALT ELIF PARA siono PARC LLAVEA content LLAVEC))) (? (BLOCK (ALT deotro)))))) (RULE deotro (BLOCK (ALT ELSE LLAVEA content LLAVEC))) (RULE siono (BLOCK (ALT expr (= op (SET MAYORQUE MENORQUE IGUAL DIFERENTE)) expr) (ALT VERDAD) (ALT FALSO))) (RULE imprime (BLOCK (ALT IMP PARA (BLOCK (ALT textobteiner) (ALT expr)) (? (BLOCK (ALT COMA expr))) PARC SC))) (RULE declara (BLOCK (ALT COMP ID (? (BLOCK (ALT EQU expr))) SC))) (RULE asigna (BLOCK (ALT ID EQU expr SC))) (RULE expr (BLOCK (ALT expr (= operation (SET ASTE DIA)) expr) (ALT expr (= operation (SET SUM RES)) expr) (ALT (? (BLOCK (ALT RES))) INT) (ALT PARA expr PARC) (ALT ID))) (RULE textobteiner (BLOCK (ALT TEXTO))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE COMENTARIO (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE LETS (BLOCK (ALT 'lets'))) (RULE RUN (BLOCK (ALT 'run'))) (RULE COMP (BLOCK (ALT 'comp'))) (RULE IMP (BLOCK (ALT 'imp'))) (RULE IF (BLOCK (ALT 'si'))) (RULE ELSE (BLOCK (ALT 'sino'))) (RULE ELIF (BLOCK (ALT 'silif'))) (RULE VERDAD (BLOCK (ALT 'true'))) (RULE FALSO (BLOCK (ALT 'false'))) (RULE ASTE (BLOCK (ALT '*'))) (RULE DIA (BLOCK (ALT '/'))) (RULE RES (BLOCK (ALT '-'))) (RULE SUM (BLOCK (ALT '+'))) (RULE EQU (BLOCK (ALT '='))) (RULE LLAVEA (BLOCK (ALT '{'))) (RULE LLAVEC (BLOCK (ALT '}'))) (RULE DOT (BLOCK (ALT '.'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE PARA (BLOCK (ALT '('))) (RULE PARC (BLOCK (ALT ')'))) (RULE SC (BLOCK (ALT ';'))) (RULE COMA (BLOCK (ALT ','))) (RULE COMID (BLOCK (ALT '"'))) (RULE MAYORQUE (BLOCK (ALT '>'))) (RULE MENORQUE (BLOCK (ALT '<'))) (RULE IGUAL (BLOCK (ALT '=='))) (RULE DIFERENTE (BLOCK (ALT '!='))) (RULE TEXTO (BLOCK (ALT COMID (* (BLOCK (ALT (~ (SET ["\r\n]))))) COMID)))))
2024-03-20 16:30:48:088 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR Dictio (RULES (RULE main (BLOCK (ALT LETS RUN LLAVEA (? (BLOCK (ALT content))) LLAVEC))) (RULE content (BLOCK (ALT (+ (BLOCK (ALT condif) (ALT imprime) (ALT declara) (ALT asigna)))))) (RULE condif (BLOCK (ALT IF PARA siono PARC LLAVEA content LLAVEC (* (BLOCK (ALT ELIF PARA siono PARC LLAVEA content LLAVEC))) (? (BLOCK (ALT deotro)))))) (RULE deotro (BLOCK (ALT ELSE LLAVEA content LLAVEC))) (RULE siono (BLOCK (ALT expr (= op (SET MAYORQUE MENORQUE IGUAL DIFERENTE)) expr) (ALT VERDAD) (ALT FALSO))) (RULE imprime (BLOCK (ALT IMP PARA (BLOCK (ALT textobteiner) (ALT expr)) (? (BLOCK (ALT COMA expr))) PARC SC))) (RULE declara (BLOCK (ALT COMP ID (? (BLOCK (ALT EQU expr))) SC))) (RULE asigna (BLOCK (ALT ID EQU expr SC))) (RULE expr (BLOCK (ALT expr (= operation (SET ASTE DIA)) expr) (ALT expr (= operation (SET SUM RES)) expr) (ALT (? (BLOCK (ALT RES))) INT) (ALT PARA expr PARC) (ALT ID))) (RULE textobteiner (BLOCK (ALT TEXTO)))))
2024-03-20 16:30:48:088 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR DictioLexer (RULES (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE COMENTARIO (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE LETS (BLOCK (ALT 'lets'))) (RULE RUN (BLOCK (ALT 'run'))) (RULE COMP (BLOCK (ALT 'comp'))) (RULE IMP (BLOCK (ALT 'imp'))) (RULE IF (BLOCK (ALT 'si'))) (RULE ELSE (BLOCK (ALT 'sino'))) (RULE ELIF (BLOCK (ALT 'silif'))) (RULE VERDAD (BLOCK (ALT 'true'))) (RULE FALSO (BLOCK (ALT 'false'))) (RULE ASTE (BLOCK (ALT '*'))) (RULE DIA (BLOCK (ALT '/'))) (RULE RES (BLOCK (ALT '-'))) (RULE SUM (BLOCK (ALT '+'))) (RULE EQU (BLOCK (ALT '='))) (RULE LLAVEA (BLOCK (ALT '{'))) (RULE LLAVEC (BLOCK (ALT '}'))) (RULE DOT (BLOCK (ALT '.'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE PARA (BLOCK (ALT '('))) (RULE PARC (BLOCK (ALT ')'))) (RULE SC (BLOCK (ALT ';'))) (RULE COMA (BLOCK (ALT ','))) (RULE COMID (BLOCK (ALT '"'))) (RULE MAYORQUE (BLOCK (ALT '>'))) (RULE MENORQUE (BLOCK (ALT '<'))) (RULE IGUAL (BLOCK (ALT '=='))) (RULE DIFERENTE (BLOCK (ALT '!='))) (RULE TEXTO (BLOCK (ALT COMID (* (BLOCK (ALT (~ (SET ["\r\n]))))) COMID)))))
2024-03-20 16:30:48:398 left-recursion LogManager.java:25 expr
    :   ( {} RES<tokenIndex=209>? INT<tokenIndex=212>  
        | PARA<tokenIndex=219> expr<tokenIndex=221> PARC<tokenIndex=223>  
        | ID<tokenIndex=230>   
        )
        (
          {this.precpred(this._ctx, 5)}?<p=5> operation=(ASTE<tokenIndex=180>|DIA<tokenIndex=182>) expr<tokenIndex=185,p=6>
                  | {this.precpred(this._ctx, 4)}?<p=4> operation=(SUM<tokenIndex=197>|RES<tokenIndex=199>) expr<tokenIndex=202,p=5>
        )*
    ;
2024-03-20 16:30:48:407 grammar LogManager.java:25 added: (RULE expr (BLOCK (ALT (BLOCK (ALT {} (? (BLOCK (ALT (RES (ELEMENT_OPTIONS (= tokenIndex 209)))))) (INT (ELEMENT_OPTIONS (= tokenIndex 212)))) (ALT (PARA (ELEMENT_OPTIONS (= tokenIndex 219))) (expr (ELEMENT_OPTIONS (= tokenIndex 221))) (PARC (ELEMENT_OPTIONS (= tokenIndex 223)))) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 230))))) (* (BLOCK (ALT ({this.precpred(this._ctx, 5)}? (ELEMENT_OPTIONS (= p 5))) (= operation (SET (ASTE (ELEMENT_OPTIONS (= tokenIndex 180))) (DIA (ELEMENT_OPTIONS (= tokenIndex 182))))) (expr (ELEMENT_OPTIONS (= tokenIndex 185) (= p 6)))) (ALT ({this.precpred(this._ctx, 4)}? (ELEMENT_OPTIONS (= p 4))) (= operation (SET (SUM (ELEMENT_OPTIONS (= tokenIndex 197))) (RES (ELEMENT_OPTIONS (= tokenIndex 199))))) (expr (ELEMENT_OPTIONS (= tokenIndex 202) (= p 5)))))))))
2024-03-20 16:30:48:411 semantics LogManager.java:25 tokens={EOF=-1, WS=1, COMENTARIO=2, LETS=3, RUN=4, COMP=5, IMP=6, IF=7, ELSE=8, ELIF=9, VERDAD=10, FALSO=11, ASTE=12, DIA=13, RES=14, SUM=15, EQU=16, LLAVEA=17, LLAVEC=18, DOT=19, ID=20, INT=21, PARA=22, PARC=23, SC=24, COMA=25, COMID=26, MAYORQUE=27, MENORQUE=28, IGUAL=29, DIFERENTE=30, TEXTO=31}
2024-03-20 16:30:48:411 semantics LogManager.java:25 strings={'lets'=3, 'run'=4, 'comp'=5, 'imp'=6, 'si'=7, 'sino'=8, 'silif'=9, 'true'=10, 'false'=11, '*'=12, '/'=13, '-'=14, '+'=15, '='=16, '{'=17, '}'=18, '.'=19, '('=22, ')'=23, ';'=24, ','=25, '"'=26, '>'=27, '<'=28, '=='=29, '!='=30}
2024-03-20 16:30:48:421 LL1 LogManager.java:25 
DECISION 0 in rule main
2024-03-20 16:30:48:421 LL1 LogManager.java:25 look=[{5..7, 20}, 18]
2024-03-20 16:30:48:421 LL1 LogManager.java:25 LL(1)? true
2024-03-20 16:30:48:421 LL1 LogManager.java:25 
DECISION 1 in rule content
2024-03-20 16:30:48:421 LL1 LogManager.java:25 look=[7, 6, 5, 20]
2024-03-20 16:30:48:422 LL1 LogManager.java:25 LL(1)? true
2024-03-20 16:30:48:422 LL1 LogManager.java:25 
DECISION 2 in rule content
2024-03-20 16:30:48:422 LL1 LogManager.java:25 look=[{5..7, 20}, 18]
2024-03-20 16:30:48:422 LL1 LogManager.java:25 LL(1)? true
2024-03-20 16:30:48:422 LL1 LogManager.java:25 
DECISION 3 in rule condif
2024-03-20 16:30:48:422 LL1 LogManager.java:25 look=[9, {5..8, 18, 20}]
2024-03-20 16:30:48:422 LL1 LogManager.java:25 LL(1)? true
2024-03-20 16:30:48:422 LL1 LogManager.java:25 
DECISION 4 in rule condif
2024-03-20 16:30:48:422 LL1 LogManager.java:25 look=[8, {5..7, 18, 20}]
2024-03-20 16:30:48:422 LL1 LogManager.java:25 LL(1)? true
2024-03-20 16:30:48:423 LL1 LogManager.java:25 
DECISION 5 in rule siono
2024-03-20 16:30:48:423 LL1 LogManager.java:25 look=[{14, 20..22}, 10, 11]
2024-03-20 16:30:48:423 LL1 LogManager.java:25 LL(1)? true
2024-03-20 16:30:48:423 LL1 LogManager.java:25 
DECISION 6 in rule imprime
2024-03-20 16:30:48:423 LL1 LogManager.java:25 look=[31, {14, 20..22}]
2024-03-20 16:30:48:423 LL1 LogManager.java:25 LL(1)? true
2024-03-20 16:30:48:423 LL1 LogManager.java:25 
DECISION 7 in rule imprime
2024-03-20 16:30:48:423 LL1 LogManager.java:25 look=[25, 23]
2024-03-20 16:30:48:423 LL1 LogManager.java:25 LL(1)? true
2024-03-20 16:30:48:423 LL1 LogManager.java:25 
DECISION 8 in rule declara
2024-03-20 16:30:48:423 LL1 LogManager.java:25 look=[16, 24]
2024-03-20 16:30:48:423 LL1 LogManager.java:25 LL(1)? true
2024-03-20 16:30:48:423 LL1 LogManager.java:25 
DECISION 9 in rule expr
2024-03-20 16:30:48:423 LL1 LogManager.java:25 look=[14, 21]
2024-03-20 16:30:48:423 LL1 LogManager.java:25 LL(1)? true
2024-03-20 16:30:48:423 LL1 LogManager.java:25 
DECISION 10 in rule expr
2024-03-20 16:30:48:424 LL1 LogManager.java:25 look=[{14, 21}, 22, 20]
2024-03-20 16:30:48:424 LL1 LogManager.java:25 LL(1)? true
2024-03-20 16:30:48:424 LL1 LogManager.java:25 
DECISION 11 in rule expr
2024-03-20 16:30:48:424 LL1 LogManager.java:25 look=[null, null]
2024-03-20 16:30:48:424 LL1 LogManager.java:25 LL(1)? false
2024-03-20 16:30:48:424 LL1 LogManager.java:25 
DECISION 12 in rule expr
2024-03-20 16:30:48:424 LL1 LogManager.java:25 look=[null, null]
2024-03-20 16:30:48:424 LL1 LogManager.java:25 LL(1)? false
2024-03-20 16:30:48:468 action-translator LogManager.java:25 translate 
2024-03-20 16:30:48:469 action-translator LogManager.java:25 translate this.precpred(this._ctx, 5)
2024-03-20 16:30:48:470 action-translator LogManager.java:25 translate this.precpred(this._ctx, 4)
2024-03-20 16:30:48:472 action-translator LogManager.java:25 translate this.precpred(this._ctx, 5)
2024-03-20 16:30:48:472 action-translator LogManager.java:25 translate this.precpred(this._ctx, 4)
